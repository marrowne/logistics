{"ast":null,"code":"import { AUTH_CHECK, AUTH_GET_PERMISSIONS, AUTH_LOGIN, AUTH_LOGOUT } from 'react-admin';\nimport dataProvider from './dataProviders';\nimport { properties, buildURLFor } from './config.js';\n\nconst FetchUsername = userId => {\n  dataProvider.getOne(\"employee\", {\n    id: \"me\"\n  }).then(response => {\n    const userName = response.data.fullName.firstName.concat(' ').concat(response.data.fullName.lastName);\n    const position = response.data.position;\n    localStorage.setItem('fullName', userName);\n    localStorage.setItem('position', position);\n  });\n};\n\nexport default ((type, params) => {\n  if (type === AUTH_LOGIN) {\n    const {\n      username,\n      password\n    } = params;\n    let urlSearchParams = new URLSearchParams();\n    urlSearchParams.append('username', username);\n    urlSearchParams.append('password', password);\n    urlSearchParams.append('grant_type', 'password');\n    const request = new Request(buildURLFor(properties.identity.endpoint.check_token, properties.identity.endpoint.host, properties.identity.endpoint.protocol, properties.identity.endpoint.port), {\n      method: 'POST',\n      body: urlSearchParams.toString(),\n      headers: new Headers({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n        'Authorization': 'Basic ' + btoa(\"parcelsSecured:secret\")\n      })\n    });\n    return fetch(request).then(response => {\n      if (response.status < 200 || response.status >= 300) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    }).then(({\n      access_token,\n      authority\n    }) => {\n      localStorage.setItem('token', access_token);\n      localStorage.setItem('username', username);\n      localStorage.setItem('authority', authority);\n      FetchUsername();\n    });\n  }\n\n  if (type === AUTH_CHECK) {\n    return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n  }\n\n  if (type === AUTH_LOGOUT) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    localStorage.removeItem('authority');\n    localStorage.removeItem('fullName');\n    localStorage.removeItem('position');\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_GET_PERMISSIONS) {\n    const authority = localStorage.getItem('authority');\n    return authority ? Promise.resolve(authority) : Promise.reject();\n  }\n\n  return Promise.resolve();\n});","map":{"version":3,"sources":["/home/moohrdy/IdeaProjects/logistics/logistics-panel/src/authProvider.js"],"names":["AUTH_CHECK","AUTH_GET_PERMISSIONS","AUTH_LOGIN","AUTH_LOGOUT","dataProvider","properties","buildURLFor","FetchUsername","userId","getOne","id","then","response","userName","data","fullName","firstName","concat","lastName","position","localStorage","setItem","type","params","username","password","urlSearchParams","URLSearchParams","append","request","Request","identity","endpoint","check_token","host","protocol","port","method","body","toString","headers","Headers","btoa","fetch","status","Error","statusText","json","access_token","authority","getItem","Promise","resolve","reject","removeItem"],"mappings":"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","sourcesContent":["import {AUTH_CHECK, AUTH_GET_PERMISSIONS, AUTH_LOGIN, AUTH_LOGOUT} from 'react-admin';\nimport dataProvider from './dataProviders';\nimport { properties, buildURLFor } from './config.js';\n\nconst FetchUsername = (userId) => {\n    dataProvider.getOne(\"employee\", {id: \"me\"})\n        .then((response) => {\n            const userName = response.data.fullName.firstName.concat(' ').concat(response.data.fullName.lastName);\n            const position = response.data.position;\n            localStorage.setItem('fullName', userName);\n            localStorage.setItem('position', position);\n        });\n};\n\nexport default (type, params) => {\n    if (type === AUTH_LOGIN) {\n        const { username, password } = params;\n        let urlSearchParams = new URLSearchParams();\n        urlSearchParams.append('username', username);\n        urlSearchParams.append('password', password);\n        urlSearchParams.append('grant_type','password');\n        const request = new Request(\n            buildURLFor(\n                properties.identity.endpoint.check_token,\n                properties.identity.endpoint.host,\n                properties.identity.endpoint.protocol,\n                properties.identity.endpoint.port), {\n            method: 'POST',\n            body: urlSearchParams.toString(),\n            headers: new Headers({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n                'Authorization': 'Basic '+btoa(\"parcelsSecured:secret\")}),\n        })\n\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(({ access_token, authority }) => {\n                localStorage.setItem('token', access_token);\n                localStorage.setItem('username', username);\n                localStorage.setItem('authority', authority);\n                FetchUsername();\n            });\n    }\n    if (type === AUTH_CHECK) {\n        return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n    }\n    if (type === AUTH_LOGOUT) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        localStorage.removeItem('authority');\n        localStorage.removeItem('fullName');\n        localStorage.removeItem('position');\n        return Promise.resolve();\n    }\n    if (type === AUTH_GET_PERMISSIONS) {\n        const authority = localStorage.getItem('authority');\n        return authority ? Promise.resolve(authority) : Promise.reject();\n    }\n    return Promise.resolve();\n}\n"]},"metadata":{},"sourceType":"module"}