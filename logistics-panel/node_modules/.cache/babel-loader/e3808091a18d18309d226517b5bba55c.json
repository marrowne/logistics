{"ast":null,"code":"import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\n\nvar useInitializeFormWithRecord = function (record) {\n  var form = useForm();\n  useEffect(function () {\n    if (!record) {\n      return;\n    }\n\n    var registeredFields = form.getRegisteredFields(); // react-final-form does not provide a way to set multiple values in one call.\n    // Using batch ensure we don't get rerenders until all our values are set\n\n    form.batch(function () {\n      Object.keys(record).forEach(function (key) {\n        // We have to check that the record key is actually registered as a field\n        // as some record keys may not have a matching input\n        if (registeredFields.some(function (field) {\n          return field === key;\n        })) {\n          if (Array.isArray(record[key])) {\n            // array of values\n            record[key].forEach(function (value, index) {\n              if (value && Object.keys(value).length > 0) {\n                // array of objects\n                Object.keys(value).forEach(function (key2) {\n                  form.change(key + \"[\" + index + \"].\" + key2, value[key2]);\n                });\n              } else {\n                // array of scalar values\n                form.change(key + \"[\" + index + \"]\", value);\n              }\n            });\n          } else {\n            // scalar value\n            form.change(key, record[key]);\n          }\n\n          form.resetFieldState(key);\n        }\n      });\n    });\n  }, [form, JSON.stringify(record)]); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nexport default useInitializeFormWithRecord;","map":{"version":3,"sources":["/home/moohrdy/IdeaProjects/logistics/logistics-panel/node_modules/ra-core/esm/form/useInitializeFormWithRecord.js"],"names":["useEffect","useForm","useInitializeFormWithRecord","record","form","registeredFields","getRegisteredFields","batch","Object","keys","forEach","key","some","field","Array","isArray","value","index","length","key2","change","resetFieldState","JSON","stringify"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA;;;;AAGA,IAAIC,2BAA2B,GAAG,UAAUC,MAAV,EAAkB;AAChD,MAAIC,IAAI,GAAGH,OAAO,EAAlB;AACAD,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI,CAACG,MAAL,EAAa;AACT;AACH;;AACD,QAAIE,gBAAgB,GAAGD,IAAI,CAACE,mBAAL,EAAvB,CAJkB,CAKlB;AACA;;AACAF,IAAAA,IAAI,CAACG,KAAL,CAAW,YAAY;AACnBC,MAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACvC;AACA;AACA,YAAIN,gBAAgB,CAACO,IAAjB,CAAsB,UAAUC,KAAV,EAAiB;AAAE,iBAAOA,KAAK,KAAKF,GAAjB;AAAuB,SAAhE,CAAJ,EAAuE;AACnE,cAAIG,KAAK,CAACC,OAAN,CAAcZ,MAAM,CAACQ,GAAD,CAApB,CAAJ,EAAgC;AAC5B;AACAR,YAAAA,MAAM,CAACQ,GAAD,CAAN,CAAYD,OAAZ,CAAoB,UAAUM,KAAV,EAAiBC,KAAjB,EAAwB;AACxC,kBAAID,KAAK,IAAIR,MAAM,CAACC,IAAP,CAAYO,KAAZ,EAAmBE,MAAnB,GAA4B,CAAzC,EAA4C;AACxC;AACAV,gBAAAA,MAAM,CAACC,IAAP,CAAYO,KAAZ,EAAmBN,OAAnB,CAA2B,UAAUS,IAAV,EAAgB;AACvCf,kBAAAA,IAAI,CAACgB,MAAL,CAAYT,GAAG,GAAG,GAAN,GAAYM,KAAZ,GAAoB,IAApB,GAA2BE,IAAvC,EAA6CH,KAAK,CAACG,IAAD,CAAlD;AACH,iBAFD;AAGH,eALD,MAMK;AACD;AACAf,gBAAAA,IAAI,CAACgB,MAAL,CAAYT,GAAG,GAAG,GAAN,GAAYM,KAAZ,GAAoB,GAAhC,EAAqCD,KAArC;AACH;AACJ,aAXD;AAYH,WAdD,MAeK;AACD;AACAZ,YAAAA,IAAI,CAACgB,MAAL,CAAYT,GAAZ,EAAiBR,MAAM,CAACQ,GAAD,CAAvB;AACH;;AACDP,UAAAA,IAAI,CAACiB,eAAL,CAAqBV,GAArB;AACH;AACJ,OAzBD;AA0BH,KA3BD;AA4BH,GAnCQ,EAmCN,CAACP,IAAD,EAAOkB,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAP,CAnCM,CAAT,CAFgD,CAqCZ;AACvC,CAtCD;;AAuCA,eAAeD,2BAAf","sourcesContent":["import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\nvar useInitializeFormWithRecord = function (record) {\n    var form = useForm();\n    useEffect(function () {\n        if (!record) {\n            return;\n        }\n        var registeredFields = form.getRegisteredFields();\n        // react-final-form does not provide a way to set multiple values in one call.\n        // Using batch ensure we don't get rerenders until all our values are set\n        form.batch(function () {\n            Object.keys(record).forEach(function (key) {\n                // We have to check that the record key is actually registered as a field\n                // as some record keys may not have a matching input\n                if (registeredFields.some(function (field) { return field === key; })) {\n                    if (Array.isArray(record[key])) {\n                        // array of values\n                        record[key].forEach(function (value, index) {\n                            if (value && Object.keys(value).length > 0) {\n                                // array of objects\n                                Object.keys(value).forEach(function (key2) {\n                                    form.change(key + \"[\" + index + \"].\" + key2, value[key2]);\n                                });\n                            }\n                            else {\n                                // array of scalar values\n                                form.change(key + \"[\" + index + \"]\", value);\n                            }\n                        });\n                    }\n                    else {\n                        // scalar value\n                        form.change(key, record[key]);\n                    }\n                    form.resetFieldState(key);\n                }\n            });\n        });\n    }, [form, JSON.stringify(record)]); // eslint-disable-line react-hooks/exhaustive-deps\n};\nexport default useInitializeFormWithRecord;\n"]},"metadata":{},"sourceType":"module"}